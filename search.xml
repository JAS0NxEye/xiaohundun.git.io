<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java Virtual Machine知识及实践</title>
      <link href="/Java-Virtual-Machine%E7%9F%A5%E8%AF%86%E5%8F%8A%E5%AE%9E%E8%B7%B5/"/>
      <url>/Java-Virtual-Machine%E7%9F%A5%E8%AF%86%E5%8F%8A%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="jvm结构"><a class="markdownIt-Anchor" href="#jvm结构"></a> JVM结构</h2><h3 id="1类文件格式class-file-format"><a class="markdownIt-Anchor" href="#1类文件格式class-file-format"></a> 1.类文件格式(class file format)</h3><p>用于在 JVM 中执行的编译后的代码,也就是<code>.class</code>文件,<code>.class</code>文件是跨语言跨平台的基础</p><h3 id="2数据类型data-types"><a class="markdownIt-Anchor" href="#2数据类型data-types"></a> 2.数据类型(Data Types)</h3><p>JVM 操作两种数据类型: <em>原始数据类型(primitive)</em>、<em>引用数据类型(reference types)</em></p><h3 id="3原始数据类型和值"><a class="markdownIt-Anchor" href="#3原始数据类型和值"></a> 3.原始数据类型和值</h3><p>JVM 支持的原始数据类型有:</p><ol><li>numeric</li><li>boolean</li><li>returnAddress</li></ol><p><strong>numeric类型</strong> 包括 <strong>整数类型</strong> 及 <strong>浮点类型</strong><br>整数类型有:</p><ol><li>byte 8bit default value is o</li><li>short 16bit default value is o</li><li>int 32bit default value is o</li><li>long 64bit default value is o</li><li>char 16bit default value is the null</li></ol><p>浮点类型有:</p><ol><li>float default value is positive zero</li><li>double default value is positive zero</li></ol><h3 id="4引用数据类型和值"><a class="markdownIt-Anchor" href="#4引用数据类型和值"></a> 4.引用数据类型和值</h3><p>引用数据类型:类、数组、接口。<br>它们的值分别是对动态创建的类实例，数组，实现接口的类实例或数组的引用<br>引用类型默认值为 <code>null</code></p><h3 id="5jvm运行时数据区run-time-data-area"><a class="markdownIt-Anchor" href="#5jvm运行时数据区run-time-data-area"></a> 5.JVM运行时数据区(Run-Time Data Area)</h3><p>JVM定义了程序运行期间需要使用的多个运行时数据区域.<br>其中一些生命周期和JVM相同.另外一些生命周期和线程相同.<br>和JVM生命周期相同的区域为共享空间,和线程生命周期相同的区域为线程私有空间.</p><h4 id="51程序计数器pc-register"><a class="markdownIt-Anchor" href="#51程序计数器pc-register"></a> 5.1程序计数器(PC Register)</h4><p>JVM支持多线程同时执行.<br>每个JVM线程都有其自己的PC(program counter)寄存器.<br>在任何时候,JVM线程都在执行单个方法的代码,也就是说该线程的当前方法.<br>如果不是本地方法(Native Method),pc寄存器包含了当前正在执行的虚拟机指令地址.如果是本地方法的话,pc寄存器值为 <strong>undefined</strong><br>此区域不存在OOM.</p><h4 id="52虚拟机栈java-virtual-machine-stacks"><a class="markdownIt-Anchor" href="#52虚拟机栈java-virtual-machine-stacks"></a> 5.2虚拟机栈(Java Virtual Machine Stacks)</h4><p>每个JVM线程都有一个私有的虚拟机栈,和线程一起创建.<br>虚拟机栈存储<a href="#6.%E5%B8%A7frames">栈帧</a>.<br>JVM栈类似于C语言的栈,它储存 <strong>本地变量</strong>, <strong>局部结果</strong>, 在方法调用及返回中扮演着重要的角色.<br>一个方法从调用到结束调用对应着栈帧出栈和入栈过程.<br>虚拟机栈空间不必是连续的.<br>虚拟机栈空间可以是固定大小,也可按照需要动态扩展和压缩.<br>如果线程需要的虚拟机栈超过允许值,JVM将抛出 <strong>StackOverflowError</strong> ,如<a href="#%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88jvm-stacksstackoverflowerror">示例</a>.<br>JVM在尝试进行扩展时内存不足 JVM 将抛出 <strong>OutOfMemoryError</strong></p><h4 id="53堆heap"><a class="markdownIt-Anchor" href="#53堆heap"></a> 5.3堆(Heap)</h4><p>内存布局:<br><strong>before version 8.0</strong><br><img src="/Java-Virtual-Machine知识及实践/4.png" alt=""><br><strong>after version 8.0</strong><br><img src="/Java-Virtual-Machine知识及实践/5.png" alt=""><br>堆空间是线程共享的.<br>这里主要存放类实例以及数组.<br>堆空间在JVM启动时创建.<br>堆储存的对象被自动存储管理系统(GC)回收.<br>堆空间不必是连续的.<br>堆空间可以是固定大小,也可按照需要动态扩展和压缩.<br>当GC无法释放所需要的空间时 JVM 将抛出 <strong>OutOfMemoryError</strong> ,如<a href="#heap-oom">示例</a></p><h4 id="54方法区method-area"><a class="markdownIt-Anchor" href="#54方法区method-area"></a> 5.4方法区(Method Area)</h4><p>方法区空间是线程共享的.<br>方法区储存类型信息,例如:运行时常量池/字段/方法/方法和构造函数代码,包括类的实例初始化以及接口初始化中使用的<a href="#7.%E7%89%B9%E6%AE%8A%E6%96%B9%E6%B3%95special-methods">特殊方法</a><br>方法区在JVM启动时创建.<br>方法区是堆的逻辑部分,可以选择实现或不实现垃圾收集及压缩.<br>堆空间不必是连续的.<br>堆空间可以是固定大小,也可按照需要动态扩展和压缩.<br>当方法区无法满足请求分配量时 JVM 将抛出 <strong>OutOfMemoryError</strong> ,如<a href="#%E6%96%B9%E6%B3%95%E5%8C%BA-oom">示例</a></p><h4 id="55运行时常量池run-time-constant-pool"><a class="markdownIt-Anchor" href="#55运行时常量池run-time-constant-pool"></a> 5.5运行时常量池(Run-Time Constant Pool)</h4><p>用于存放编译期生成的各种字面量和符号引用，但并非只有编译期才产生，它是动态的，也就是说在运行期间也可以将新的常量放进去，比如 <strong>String 类的 intern()方法</strong>。运行时常量池是在 <strong>方法区(Method Area)</strong> 中分配的。<br><img src="/Java-Virtual-Machine知识及实践/6.png" alt=".class"></p><blockquote><p>上图中使用 <strong>javap</strong> 命令对 .class 文件进行反编译，其中15行的Constant pool后便是运行时常量池内容</p></blockquote><h4 id="56本地方法栈native-method-stacks"><a class="markdownIt-Anchor" href="#56本地方法栈native-method-stacks"></a> 5.6本地方法栈(Native Method Stacks)</h4><p>支持本地方法(使用非java语言的方法)</p><h3 id="6帧frames"><a class="markdownIt-Anchor" href="#6帧frames"></a> 6.帧(Frames)</h3><p>frame用来储存数据及局部结果，也被用来执行动态链接，返回方法的返回值，以及异常处理。<br>每当方法调用时创建一个帧，当调用结束时，帧被销毁(<strong>无论调用成功是否</strong>)。<br>帧创建在<a href="#5.2%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88java-virtual-machine-stacks">虚拟机栈</a>中。<br>每个栈拥有自己的</p><ol><li>本地变量数组 array of local variables</li><li>操作数栈 operand stacks</li><li>类的当前方法的运行时常量池引用</li></ol><p>帧中本地变量数组以及操作数帧的大小在编译期已经确定。</p><blockquote><p>线程创建的帧为该线程的本地帧，其他线程不可引用</p></blockquote><h4 id="61局部变量local-variables"><a class="markdownIt-Anchor" href="#61局部变量local-variables"></a> 6.1局部变量(Local Variables)</h4><p>每个帧包含一个称为局部变量的变量数组。局部变量数组长度在编译期已经确定。<br>一个局部变量的值类型可以是:</p><ul><li>boolean</li><li>byte</li><li>char</li><li>short</li><li>int</li><li>float</li><li>reference</li><li>returnAddress<br>一对局部变量的值类型可以是:</li><li>long</li><li>double</li></ul><p>局部变量用索引维护变量数组。<br><img src="/Java-Virtual-Machine知识及实践/7.png" alt=""></p><blockquote><p>上图中使用 <strong>javap</strong> 命令反编译 .class，图中第一行显示即为局部变量，即当前帧的局部变量</p></blockquote><h4 id="62操作数栈operand-stacks"><a class="markdownIt-Anchor" href="#62操作数栈operand-stacks"></a> 6.2操作数栈(Operand Stacks)</h4><p>每个帧拥有一个后进先出(LIFO)栈，也就是操作数栈。<br>操作数栈最大深度在编译期已经确定。<br>Java虚拟机提供指令以将局部变量或字段中的常量或值加载到 <strong>操作数栈</strong> 上，另提供拿取 <strong>操作数(operand)</strong> 以及操作 <strong>操作数(operand)</strong> 并将其放回 <strong>操作数栈</strong> 的Java虚拟机指令</p><p>比如 <strong>iadd</strong> 指令(两个整数相加)。<strong>bipush</strong> 指令将int值压入操作数栈，使用 <strong>iadd</strong> 指令将两个值相加并将结果压入栈顶，弹出两个整形值，使用 <strong>ireturn</strong> 返回栈顶元素。<br>代码及反编译结果如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">testInstruction</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">return</span> a+<span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Code:</span><br><span class="line">      stack=2, locals=2, args_size=1</span><br><span class="line">         0: bipush        30</span><br><span class="line">         2: istore_1</span><br><span class="line">         3: iload_1</span><br><span class="line">         4: bipush        20</span><br><span class="line">         6: iadd</span><br><span class="line">         7: ireturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 43: 0</span><br><span class="line">        line 44: 3</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       8     0  this   Lcom/baosight/<span class="built_in">test</span>/BitOpt;</span><br><span class="line">            3       5     1     a   I</span><br></pre></td></tr></table></figure><blockquote><p>istore_&lt;n&gt;指令-将int存储到局部变量表中<br>iload_&lt;n&gt;指令-从局部变量表中取出int<br>其中 n 必须是当前帧本地变量表中的索引，且索引处的本地变量必须为 int</p></blockquote><h4 id="动态链接dynamic-linking"><a class="markdownIt-Anchor" href="#动态链接dynamic-linking"></a> 动态链接(Dynamic Linking)</h4><h3 id="7特殊方法special-methods"><a class="markdownIt-Anchor" href="#7特殊方法special-methods"></a> 7.特殊方法(Special Methods)</h3><h3 id="oom及dump内存快照分析实践"><a class="markdownIt-Anchor" href="#oom及dump内存快照分析实践"></a> OOM及DUMP内存快照分析实践</h3><h4 id="heap-oom"><a class="markdownIt-Anchor" href="#heap-oom"></a> Heap OOM</h4><ol><li>编写测试类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-Xms3m -Xmx3m -XX:+HeapDumpOnOutOfMemoryError</span></span><br><span class="line"><span class="comment">//Heap用来存放对象实例,生成大量对象,撑爆空间</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMdump</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">oom</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        List&lt;oom&gt; ooml = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            ooml.add(<span class="keyword">new</span> oom());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>设置运行参数<br><img src="/Java-Virtual-Machine知识及实践/2.png" alt=""><br>按照上图添加 Run/Debug Configurations,注意 VM options,设置 Heap 大小且不可扩展且DUMP 内存快照以便事后分析<br>运行上面代码将会抛出OOM异常如下</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: Java heap space <span class="comment">//  OOM异常原因: 堆空间</span></span><br><span class="line">Dumping heap to java_pid1497.hprof ...</span><br><span class="line">Heap dump file created [<span class="number">5050206</span> bytes in <span class="number">0.017</span> secs]</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">  at java.util.Arrays.copyOf(Arrays.java:<span class="number">3210</span>)</span><br><span class="line">  at java.util.Arrays.copyOf(Arrays.java:<span class="number">3181</span>)</span><br><span class="line">  at java.util.ArrayList.grow(ArrayList.java:<span class="number">265</span>)</span><br><span class="line">  at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:<span class="number">239</span>)</span><br><span class="line">  at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:<span class="number">231</span>)</span><br><span class="line">  at java.util.ArrayList.add(ArrayList.java:<span class="number">462</span>) <span class="comment">// 空间不够准备扩展,但内存不够扩展失败导致异常出现</span></span><br><span class="line">  at com.example.demo.OOMdump.main(OOMdump.java:<span class="number">13</span>)</span><br></pre></td></tr></table></figure><p>使用内存分析工具MAT查看java_pid1497.hprof,<a href="http://www.eclipse.org/mat/downloads.php" target="_blank" rel="noopener">MAT下载地址</a><br><img src="/Java-Virtual-Machine知识及实践/3.png" alt=""><br>从图中我们可以看到内部类oom占比77.91%,共106710个实体</p><blockquote><p>下载过软件之后,安装出错,直接打开包,打开里边的Memory Analyzer使用即可</p></blockquote><h4 id="方法区-oom"><a class="markdownIt-Anchor" href="#方法区-oom"></a> 方法区 OOM</h4><ol><li>编写测试类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//8.0版本前</span></span><br><span class="line"><span class="comment">//-XX:PermSize=6M -XX:MaxPermSize=10M</span></span><br><span class="line"><span class="comment">//通过CGLib生成大量的类使方法区溢出</span></span><br><span class="line"><span class="comment">//方法区主要存放Class相关信息,如:类名/访问修饰符/方法描述/常量池/字段描述等</span></span><br><span class="line"><span class="comment">//8.0版本后移除永久代,取而代之的是本地内存-元空间</span></span><br><span class="line"><span class="comment">//-XX:MaxMetaspaceSize=6M</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMMethodArea</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">            enhancer.setSuperclass(OOMdump.oom.class);</span><br><span class="line">            enhancer.setUseCache(<span class="keyword">false</span>);</span><br><span class="line">            enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> methodProxy.invokeSuper(o,args);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            enhancer.create();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>运行结果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.OutOfMemoryError: Metaspace <span class="comment">// 若在8.0之前,此处应该是 PermGen space</span></span><br><span class="line">  at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:<span class="number">345</span>)</span><br><span class="line">  at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:<span class="number">492</span>)</span><br></pre></td></tr></table></figure><h3 id="虚拟机栈jvm-stacksstackoverflowerror"><a class="markdownIt-Anchor" href="#虚拟机栈jvm-stacksstackoverflowerror"></a> 虚拟机栈(JVM Stacks)StackOverFlowError</h3><ol><li>编写测试类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-Xss160k,通过减小虚拟机栈大小,创建大量栈帧撑爆虚拟机栈</span></span><br><span class="line"><span class="comment">//Java虚拟机栈描述Java方法执行的内存模型,每个方法在运行的同时都会</span></span><br><span class="line"><span class="comment">//创建一个栈帧(Stack Frame)用于储存局部变量/操作数栈/动态链接/方法出口等</span></span><br><span class="line"><span class="comment">//一个方法从调用到完成调用对应着一个栈帧入栈和出栈的过程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackSOF</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> stackLength = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stackLeak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        stackLength++;</span><br><span class="line">        stackLeak();<span class="comment">//  递归</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        StackSOF stackSOF = <span class="keyword">new</span> StackSOF();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stackSOF.stackLeak();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (StackOverflowError stackOverflowError) &#123;</span><br><span class="line">              System.out.println(<span class="string">"length:"</span> + stackSOF.stackLength + <span class="string">"\n"</span> + stackOverflowError.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>设置运行参数为 -Xss160k(最小)<br>运行测试将抛出SOF异常如下:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">length:<span class="number">772</span></span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.StackOverflowError</span><br><span class="line">  at com.example.demo.StackSOF.stackLeak(StackSOF.java:<span class="number">7</span>)</span><br><span class="line">  at com.example.demo.StackSOF.stackLeak(StackSOF.java:<span class="number">7</span>)</span><br><span class="line">  at com.example.demo.StackSOF.stackLeak(StackSOF.java:<span class="number">7</span>)</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><blockquote><p>如果不设置VM options,栈深度为12455,也就是当前环境下虚拟机默认最大栈深度为12455</p></blockquote><p>本文链接 <a href="http://blog.elegantme.cn/Java-Virtual-Machine%E7%9F%A5%E8%AF%86%E5%8F%8A%E5%AE%9E%E8%B7%B5/">http://blog.elegantme.cn/Java-Virtual-Machine知识及实践/</a> 转载请标明出处</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://blog.elegantme.cn/Spring-Boot启动类SpringApplication解析/">Spring-Boot启动类SpringApplication解析</a></li><li><a href="http://elegantme.cn/Spring-Boot启动类SpringApplication解析/">Spring-Boot启动类SpringApplication解析</a></li></ul></div>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac下编译OpenJDK8及虚拟机实践</title>
      <link href="/Mac%E4%B8%8B%E7%BC%96%E8%AF%91OpenJDK8/"/>
      <url>/Mac%E4%B8%8B%E7%BC%96%E8%AF%91OpenJDK8/</url>
      
        <content type="html"><![CDATA[<h2 id="当前环境"><a class="markdownIt-Anchor" href="#当前环境"></a> 当前环境</h2><ol><li>Mac 10.14.1</li><li>JDK 1.8.0_181</li></ol><h2 id="下载源码"><a class="markdownIt-Anchor" href="#下载源码"></a> 下载源码</h2><ul><li>去官网下载源码:<a href="http://download.java.net/openjdk/jdk8/" target="_blank" rel="noopener">OpenJDK8下载</a><br>当我想要去直接下载压缩包时,网站却遇到技术问题(无法使用),所以我还是用了下面的方法</li><li>使用 <em>Mercurial</em> 版本管理工具拉取代码: <a href="http://hg.openjdk.java.net/jdk8/jdk8" target="_blank" rel="noopener">OpenJDK主页</a><br><a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew安装</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install mercurial</span><br></pre></td></tr></table></figure><p>拉取项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hg <span class="built_in">clone</span> http://hg.openjdk.java.net/jdk8/jdk8 jdk8</span><br><span class="line"><span class="built_in">cd</span> jdk8</span><br><span class="line">bash ./get_source.sh</span><br></pre></td></tr></table></figure><p><img src="/Mac下编译OpenJDK8/1.png" alt=""></p><h2 id="安装依赖"><a class="markdownIt-Anchor" href="#安装依赖"></a> 安装依赖</h2><blockquote><p>使用clang编译器,不需要下载xcode</p></blockquote><h3 id="xquartz"><a class="markdownIt-Anchor" href="#xquartz"></a> XQuartz</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install XQuartz</span><br></pre></td></tr></table></figure><h3 id="freetype"><a class="markdownIt-Anchor" href="#freetype"></a> freetype</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install freetype</span><br></pre></td></tr></table></figure><h3 id="gun组件"><a class="markdownIt-Anchor" href="#gun组件"></a> GUN组件</h3><blockquote><p>注意:在接下来的编译过程中,若不需要开启调试,不需要安装此组件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install binutils</span><br></pre></td></tr></table></figure><h2 id="进行编译"><a class="markdownIt-Anchor" href="#进行编译"></a> 进行编译</h2><ol><li>确保你在jdk8目录中</li><li>运行 ./configure<br>不开启调试</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash ./configure --with-freetype-include=/usr/<span class="built_in">local</span>/include/freetype2 --with-freetype-lib=/usr/<span class="built_in">local</span>/lib/</span><br></pre></td></tr></table></figure><p>开启调试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash ./configure --with-freetype-include=/usr/<span class="built_in">local</span>/include/freetype2 --with-freetype-lib=/usr/<span class="built_in">local</span>/lib/ --with-target-bits=64 --with-debug-level=slowdebug --<span class="built_in">enable</span>-debug-symbols ZIP_DEBUGINFO_FILES=0</span><br></pre></td></tr></table></figure><p>开启调试若不<a href="#GUN%E7%BB%84%E4%BB%B6">安装gun组件</a>,将会提示缺少 <em>objcopy</em><br>如果没有错误,将输出以下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Configuration summary:</span><br><span class="line">* Debug level:    release</span><br><span class="line">* JDK variant:    normal</span><br><span class="line">* JVM variants:   server</span><br><span class="line">* OpenJDK target: OS: macosx, CPU architecture: x86, address length: 64</span><br><span class="line"></span><br><span class="line">Tools summary:</span><br><span class="line">* Boot JDK:       java version <span class="string">"1.8.0_181"</span> Java(TM) SE Runtime Environment (build 1.8.0_181-b13) Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)  (at /Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/home)</span><br><span class="line">* C Compiler:      version  (at /usr/bin/gcc)</span><br><span class="line">* C++ Compiler:    version  (at /usr/bin/g++)</span><br><span class="line"></span><br><span class="line">Build performance summary:</span><br><span class="line">* Cores to use:   5</span><br><span class="line">* Memory <span class="built_in">limit</span>:   16384 MB</span><br><span class="line">* ccache status:  not installed (consider installing)</span><br><span class="line"></span><br><span class="line">Build performance tip: ccache gives a tremendous speedup <span class="keyword">for</span> C++ recompilations.</span><br><span class="line">You <span class="keyword">do</span> not have ccache installed. Try installing it.</span><br></pre></td></tr></table></figure><ol start="4"><li>创建临时环境变量文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch jvm.sh</span><br></pre></td></tr></table></figure><p><a href="http://xn--jvm-t29h961e.sh" target="_blank" rel="noopener">编辑jvm.sh</a>,内容如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=C</span><br><span class="line"><span class="built_in">export</span> CC=clang</span><br><span class="line"><span class="built_in">export</span> COMPILER_WARNINGS_FATAL=<span class="literal">false</span></span><br><span class="line"><span class="built_in">export</span> LFLAGS=<span class="string">'-Xlinker -lstdc++'</span></span><br><span class="line"><span class="built_in">export</span> USE_CLANG=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> LP64=1</span><br><span class="line"><span class="built_in">export</span> ARCH_DATA_MODEL=64</span><br><span class="line"><span class="built_in">export</span> ALLOW_DOWNLOADS=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> HOTSPOT_BUILD_JOBS=3</span><br><span class="line"><span class="built_in">export</span> SKIP_COMPARE_IMAGES=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> USE_PRECOMPILED_HEADER=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> INCREMENTAL_BUILD=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> BUILD_LANGTOOLS=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> BUILD_JAXP=<span class="literal">false</span></span><br><span class="line"><span class="built_in">export</span> BUILD_JAXWS=<span class="literal">false</span></span><br><span class="line"><span class="built_in">export</span> BUILD_CORBA=<span class="literal">false</span></span><br><span class="line"><span class="built_in">export</span> BUILD_HOTSPOT=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> BUILD_JDK=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> SKIP_DEBUG_BUILD=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> SKIP_FASTDEBUG_BUILD=<span class="literal">false</span></span><br><span class="line"><span class="built_in">export</span> DEBUG_NAME=debug</span><br><span class="line"><span class="built_in">export</span> BUILD_DEPLOY=<span class="literal">false</span></span><br><span class="line"><span class="built_in">export</span> BUILD_INSTALL=<span class="literal">false</span></span><br><span class="line"><span class="comment"># 若开启调试,放开下面这一行</span></span><br><span class="line"><span class="comment"># export OBJCOPY=gobjcopy</span></span><br></pre></td></tr></table></figure><p>使临时环境变量生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> jvm.sh</span><br></pre></td></tr></table></figure><ol start="5"><li>make all</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make all</span><br></pre></td></tr></table></figure><p>接下来许久没听到声音的风扇狂转<br>成功信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Finished docs (build time 00:01:06)</span></span><br><span class="line"></span><br><span class="line">----- Build <span class="built_in">times</span> -------</span><br><span class="line">Start 2018-11-21 23:25:14</span><br><span class="line">End   2018-11-21 23:31:22</span><br><span class="line">00:00:12 corba</span><br><span class="line">00:00:20 demos</span><br><span class="line">00:01:06 docs</span><br><span class="line">00:01:25 hotspot</span><br><span class="line">00:00:39 images</span><br><span class="line">00:00:08 jaxp</span><br><span class="line">00:00:13 jaxws</span><br><span class="line">00:01:41 jdk</span><br><span class="line">00:00:18 langtools</span><br><span class="line">00:00:06 nashorn</span><br><span class="line">00:06:08 TOTAL</span><br><span class="line">-------------------------</span><br><span class="line">Finished building OpenJDK <span class="keyword">for</span> target <span class="string">'all'</span></span><br></pre></td></tr></table></figure><p>期间应该会碰到一些错误,请参考下面的错误列表</p><h2 id="错误列表"><a class="markdownIt-Anchor" href="#错误列表"></a> 错误列表</h2><h3 id="bash-configure过程中可能会遇到的错误"><a class="markdownIt-Anchor" href="#bash-configure过程中可能会遇到的错误"></a> bash ./configure过程中可能会遇到的错误:</h3><ol><li>解决错误</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configure: error: GCC compiler is required</span><br></pre></td></tr></table></figure><p>编辑 <code>comman/autoconf/generated-configure.sh</code>,注释第20061，21640行</p><h3 id="make-all过程中可能遇到的错误"><a class="markdownIt-Anchor" href="#make-all过程中可能遇到的错误"></a> make all过程中可能遇到的错误:</h3><ol><li>解决错误</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Users/ydcun-pro/workspace/openjdk/jdk8/hotspot/src/share/vm/code/relocInfo.hpp:367:27: error: friend declaration specifying a default argument must be a definition</span><br><span class="line">      inline friend relocInfo prefix_relocInfo(int datalen = 0);</span><br><span class="line">                              ^</span><br><span class="line">    /Users/ydcun-pro/workspace/openjdk/jdk8/hotspot/src/share/vm/code/relocInfo.hpp:462:18: error: friend declaration specifying a default argument must be the only declaration</span><br><span class="line">    inline relocInfo prefix_relocInfo(int datalen) &#123;</span><br><span class="line">                     ^</span><br><span class="line">    /Users/ydcun-pro/workspace/openjdk/jdk8/hotspot/src/share/vm/code/relocInfo.hpp:367:27: note: previous declaration is here</span><br><span class="line">      inline friend relocInfo prefix_relocInfo(int datalen = 0);</span><br><span class="line">                              ^</span><br><span class="line">    /Users/ydcun-pro/workspace/openjdk/jdk8/hotspot/src/share/vm/code/relocInfo.hpp:464:59: error: <span class="string">'RAW_BITS'</span> is a protected member of <span class="string">'relocInfo'</span></span><br><span class="line">      <span class="built_in">return</span> relocInfo(relocInfo::data_prefix_tag, relocInfo::RAW_BITS, relocInfo::datalen_tag | datalen);</span><br><span class="line">                                                              ^</span><br><span class="line">    /Users/ydcun-pro/workspace/openjdk/jdk8/hotspot/src/share/vm/code/relocInfo.hpp:272:23: note: declared protected here</span><br><span class="line">      enum RawBitsToken &#123; RAW_BITS &#125;;</span><br><span class="line">                          ^</span><br><span class="line">    /Users/ydcun-pro/workspace/openjdk/jdk8/hotspot/src/share/vm/code/relocInfo.hpp:464:10: error: calling a protected constructor of class <span class="string">'relocInfo'</span></span><br><span class="line">      <span class="built_in">return</span> relocInfo(relocInfo::data_prefix_tag, relocInfo::RAW_BITS, relocInfo::datalen_tag | datalen);</span><br><span class="line">             ^</span><br><span class="line">    /Users/ydcun-pro/workspace/openjdk/jdk8/hotspot/src/share/vm/code/relocInfo.hpp:273:3: note: declared protected here</span><br><span class="line">      relocInfo(relocType <span class="built_in">type</span>, RawBitsToken ignore, int bits)</span><br><span class="line">      ^</span><br></pre></td></tr></table></figure><p>修改relocInfo.hpp,编辑 <em>hotspot/src/share/vm/code/relocInfo.hpp</em><br>修改367行为:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">friend</span> relocInfo <span class="title">prefix_relocInfo</span><span class="params">(<span class="keyword">int</span> datalen)</span></span>;</span><br></pre></td></tr></table></figure><p>修改462行为:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> relocInfo <span class="title">prefix_relocInfo</span><span class="params">(<span class="keyword">int</span> datalen = <span class="number">0</span>)</span> </span>&#123;</span><br></pre></td></tr></table></figure><ol start="2"><li>解决错误</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/Users/chou/Documents/work/projects/jdk8/hotspot/src/share/vm/runtime/virtualspace.cpp:331:14: error: ordered comparison between pointer and zero (<span class="string">'char *'</span> and <span class="string">'int'</span>)</span><br><span class="line">  <span class="keyword">if</span> (base() &gt; 0) &#123;</span><br><span class="line">      ~~~~~~ ^ ~</span><br></pre></td></tr></table></figure><p>编辑 <em>hotspot/src/share/vm/runtime/virtualspace.cpp</em> , 修改331行为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (base() != <span class="literal">NULL</span>) &#123;</span><br></pre></td></tr></table></figure><ol start="3"><li>解决错误</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/Users/lican/hg_bak/jdk8u-dev/hotspot/src/share/vm/opto/lcm.cpp:52:34: error: ordered comparison between pointer and zero (<span class="string">'address'</span> (aka <span class="string">'unsigned char *'</span>) and <span class="string">'int'</span>)</span><br><span class="line">  <span class="keyword">if</span> (Universe::narrow_oop_base()&gt;0) &#123; // Implies UseCompressedOops.</span><br><span class="line">      ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~</span><br></pre></td></tr></table></figure><p>编辑 <em>hotspot/src/share/vm/opto/lcm.cpp</em> , 修改52行为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Universe::narrow_oop_base() != <span class="literal">NULL</span>) &#123;</span><br></pre></td></tr></table></figure><ol start="4"><li>解决错误</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.VerifyError: class jdk.nashorn.internal.objects.ScriptFunctionImpl overrides final method getPrototype.()Ljava/lang/Object;</span><br><span class="line">    at java.lang.ClassLoader.defineClass1(Native Method)</span><br><span class="line">    at java.lang.ClassLoader.defineClass(ClassLoader.java:763)</span><br><span class="line">    at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)</span><br><span class="line">    at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)</span><br><span class="line">    at java.net.URLClassLoader.access<span class="variable">$100</span>(URLClassLoader.java:73)</span><br><span class="line">    at java.net.URLClassLoader<span class="variable">$1</span>.run(URLClassLoader.java:368)</span><br><span class="line">    at java.net.URLClassLoader<span class="variable">$1</span>.run(URLClassLoader.java:362)</span><br><span class="line">    at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">    at java.net.URLClassLoader.findClass(URLClassLoader.java:361)</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)</span><br><span class="line">    at sun.misc.Launcher<span class="variable">$AppClassLoader</span>.loadClass(Launcher.java:349)</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span><br><span class="line">    at jdk.nashorn.internal.tools.nasgen.StringConstants.&lt;clinit&gt;(StringConstants.java:85)</span><br><span class="line">    at jdk.nashorn.internal.tools.nasgen.ScriptClassInstrumentor<span class="variable">$2</span>.visitMethodInsn(ScriptClassInstrumentor.java:157)</span><br><span class="line">    at jdk.internal.org.objectweb.asm.MethodVisitor.visitMethodInsn(MethodVisitor.java:509)</span><br><span class="line">    at jdk.internal.org.objectweb.asm.ClassReader.readCode(ClassReader.java:1445)</span><br><span class="line">    at jdk.internal.org.objectweb.asm.ClassReader.readMethod(ClassReader.java:1046)</span><br><span class="line">    at jdk.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:722)</span><br><span class="line">    at jdk.internal.org.objectweb.asm.ClassReader.accept(ClassReader.java:535)</span><br><span class="line">    at jdk.nashorn.internal.tools.nasgen.Main.process(Main.java:121)</span><br><span class="line">    at jdk.nashorn.internal.tools.nasgen.Main.processAll(Main.java:88)</span><br><span class="line">    at jdk.nashorn.internal.tools.nasgen.Main.main(Main.java:62)</span><br></pre></td></tr></table></figure><p>编辑 <em>nashorn/make/BuildNashorn.gmk</em> , 修改80行:<br>原:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-cp &quot;$(NASHORN_OUTPUTDIR)/nasgen_classes$(PATH_SEP)$(NASHORN_OUTPUTDIR)/nashorn_classes&quot; \</span><br></pre></td></tr></table></figure><p>修改后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xbootclasspath/p:&quot;$(NASHORN_OUTPUTDIR)/nasgen_classes$(PATH_SEP)$(NASHORN_OUTPUTDIR)/nashorn_classes&quot; \</span><br></pre></td></tr></table></figure><p>本文链接 <a href="http://blog.elegantme.cn/Mac%E4%B8%8B%E7%BC%96%E8%AF%91OpenJDK8/">http://blog.elegantme.cn/Mac下编译OpenJDK8/</a> 转载请标明出处</p>]]></content>
      
      
      
        <tags>
            
            <tag> OpenJDK8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring-Boot启动类SpringApplication解析</title>
      <link href="/Spring-Boot%E5%90%AF%E5%8A%A8%E7%B1%BBSpringApplication%E8%A7%A3%E6%9E%90/"/>
      <url>/Spring-Boot%E5%90%AF%E5%8A%A8%E7%B1%BBSpringApplication%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文授权公众号: 后端技术精选 独家发布</p></blockquote><p>SB提供了内嵌Servlet容器并且提供了非常简单的应用启动方式–SpringApplication#run()<br>在任意的main方法中使用SpringApplication#run()即可完成应用的引导和启动.<br>那么接下来为大家介绍一下它是如何启动的,它都做了些什么.</p><p>默认情况下引导和启动应用的步骤如下:</p><ol><li>创建合适的ApplicationContext(这取决于你的classpath–<code>WebApplicationType.deduceFromClassPath</code>从classpath推断应用类型,这将在下面代码中介绍到)</li><li>注册CommandLinePropertySource用来暴露命令行参数(command line arguments)和Spring properties</li><li>刷新ApplicationContext,loading所有单例bean</li><li>触发所有的CommandLineRunner beans</li></ol><p>大多数情况下我们在main方法中是这样引导和启动应用的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     SpringApplication.run(MyApplication.class, args);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>你还可以创建SpringApplication实例,并调用run方法.<br>你还可以直接使用SpringApplication中的main方法启动</p></blockquote><p>通过SpringApplication的<a name="静态run方法">静态run方法</a>,那我们接着来看下这个静态方法做了什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt;[] primarySources,String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SpringApplication(primarySources).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没错~它创建了一个SpringApplication实例并调用了实例中的公有run方法,并将main方法的参数传递过去(这些参数将会用来运行CommandLineRunner beans)<br>我们进去实例方法中看一下做了什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">null</span>, primarySources);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个<a name="重载函数">重载函数</a>,它最终会进入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</span><br><span class="line">    <span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">    <span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第5行我们可以看到上面提到过的应用类型推断函数WebApplicationType.deduceFromClasspath(),具体是如何进行推断的如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> WebApplicationType <span class="title">deduceFromClasspath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ClassUtils.isPresent(WEBFLUX_INDICATOR_CLASS, <span class="keyword">null</span>)</span><br><span class="line">            &amp;&amp; !ClassUtils.isPresent(WEBMVC_INDICATOR_CLASS, <span class="keyword">null</span>)</span><br><span class="line">            &amp;&amp; !ClassUtils.isPresent(JERSEY_INDICATOR_CLASS, <span class="keyword">null</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> WebApplicationType.REACTIVE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String className : SERVLET_INDICATOR_CLASSES) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ClassUtils.isPresent(className, <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> WebApplicationType.NONE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> WebApplicationType.SERVLET;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如其中的 <em>WEBFLUX_INDICATOR_CLASS</em> ,它的值是 <code>org.springframework.web.reactive.DispatcherHandler</code>,也就是说系统去尝试加载此类以及其依赖类,如果加载不成功那么它就不是此应用类型<br>我们在回到SpringApplication的<a href="#%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0">重载函数</a>观察第6、7行, <em>getSpringFactoriesInstances</em> 是根据指定的类类型从<span style="color:red">META/INF/spring.factories</span>加载bean,也就是说第6、7行加载了初始化类以及监听器,为了更加直观,下面给出spring.factories文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Application Context Initializers</span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer</span><br><span class="line"></span><br><span class="line"># Application Listeners</span><br><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">org.springframework.boot.ClearCachesApplicationListener,\</span><br><span class="line">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</span><br><span class="line">org.springframework.boot.context.FileEncodingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.ConfigFileApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.DelegatingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.logging.LoggingApplicationListener,\</span><br><span class="line">org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener</span><br></pre></td></tr></table></figure><p>我们在回到SpringApplication的<a href="#%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0">重载函数</a>观察第8行,它从stack trace中推断main方法所在的类并加载返回,<span style="color: red">至此</span>SpringApplication构造器已经完成它的工作,在前面提到的SpringApplication<a href="#%E9%9D%99%E6%80%81run%E6%96%B9%E6%B3%95">静态run方法</a>中已经完成了构造,紧接着就是调用了<a name="run方法">公用run方法</a></p><blockquote><p>方法中多次调用类中他处方法,所以没法通过添加注释说明,导致篇幅可能会有点长或者需要来回滚动,不过主要方法处设置了锚链接,你可以点击跳转.在非run方法中以注释说明,防止结构复杂</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    StopWatch stopWatch = <span class="keyword">new</span> StopWatch();<span class="comment">//用来计时的</span></span><br><span class="line">    stopWatch.start();</span><br><span class="line">    ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    configureHeadlessProperty();</span><br><span class="line">    SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">    listeners.starting();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">        ConfigurableEnvironment environment = prepareEnvironment(listeners,applicationArguments);</span><br><span class="line">        configureIgnoreBeanInfo(environment);</span><br><span class="line">        Banner printedBanner = printBanner(environment);<span class="comment">//  打印Banner用的对象</span></span><br><span class="line">        context = createApplicationContext();</span><br><span class="line">        exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,<span class="keyword">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);<span class="comment">// 从spring.facroties加载了 Error Reporters</span></span><br><span class="line">        prepareContext(context, environment, listeners, applicationArguments,printedBanner);</span><br><span class="line">        refreshContext(context);</span><br><span class="line">        afterRefresh(context, applicationArguments);</span><br><span class="line">        stopWatch.stop();<span class="comment">// 表停了</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;<span class="comment">// 记日志</span></span><br><span class="line">            <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">                    .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">        &#125;</span><br><span class="line">        listeners.started(context);</span><br><span class="line">        callRunners(context, applicationArguments);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        listeners.running(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在第4行创建了用来返回的可配置应用上下文对象 <em>ConfigurableApplicationContext</em><br>在第7行处从spring.factories加载了所有runListeners</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Run Listeners</span><br><span class="line">org.springframework.boot.SpringApplicationRunListener=\</span><br><span class="line">org.springframework.boot.context.event.EventPublishingRunListener</span><br></pre></td></tr></table></figure><p>只有一个,从名字可以看出来它是干嘛用的,没错,用来发布事件用的,继承了SpringRunApplicationListener,内部有类 <code>SimpleApplicationEventMulticaster</code> 用来多路广播事件,事件如下:</p><ol><li>starting 首次调用run方法启动时立即调用</li><li>enviromentPrepared 环境已经准备完毕时调用,ApplicationContext被创建之前</li><li>contextPrepared ApplicationContext被创建且准备完毕调用,在资源加载之前</li><li>contextLoaded 在ApplicationContext加载之后,刷新之前调用</li><li>started 上下文被刷新应用启动完毕调用,但在CommandLineRunners和ApplicationRunners被调用之前</li><li>running 在run方法结束前立即调用,此时应用上下文已被刷新,且CommandLineRunners和ApplicationRunners已被调用</li><li>failed 顾名思义,当启动应用出错时调用</li></ol><blockquote><p>请注意此处的广播事件排序,在run方法启动时会以此顺序发布事件,当然除了fail以外,接下来的分析中将会贯穿这个流程</p></blockquote><p>接着分析<a href="#run%E6%96%B9%E6%B3%95">run方法</a><br>刚看完SpringApplicationRunListeners,紧接着<a href="#run%E6%96%B9%E6%B3%95">run方法</a>第8行我们就发现立刻调用了starting()方法发布了 <strong>ApplicationStartingEvent</strong> ,这就对应了我们刚刚说到的starting调用时机,Called immediately when the run method has first started. Can be used for very early initialization.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.initialMulticaster.multicastEvent(<span class="keyword">new</span> ApplicationStartingEvent(<span class="keyword">this</span>.application, <span class="keyword">this</span>.args));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  其他事件发布方法同理,不同的只是 事件对象 ,比如这里是ApplicationStartingEvent</span></span><br></pre></td></tr></table></figure><p>之后在<a href="#run%E6%96%B9%E6%B3%95">run方法</a>第11行调用 <em>prepareEnvironment()</em> 创建了应用环境对象,我们来看一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">prepareEnvironment</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">            ApplicationArguments applicationArguments)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建和配置应用环境</span></span><br><span class="line">    ConfigurableEnvironment environment = getOrCreateEnvironment();</span><br><span class="line">    configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class="line">    <span class="comment">//  发布enviromentPrepared事件,对应事件顺序2,也就是说环境已经准备完毕,上下文被创建之前</span></span><br><span class="line">    listeners.environmentPrepared(environment);</span><br><span class="line">    <span class="comment">//  将应用环境绑定到SpringApplication</span></span><br><span class="line">    bindToSpringApplication(environment);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isCustomEnvironment) &#123;</span><br><span class="line">        environment = <span class="keyword">new</span> EnvironmentConverter(getClassLoader())</span><br><span class="line">                .convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());</span><br><span class="line">    &#125;</span><br><span class="line">    ConfigurationPropertySources.attach(environment);</span><br><span class="line">    <span class="keyword">return</span> environment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#run%E6%96%B9%E6%B3%95">run方法</a>第14行调用了 <em>createApplicationContext()</em> 方法根据应用类型创建了对应的默认应用上下文对象,如 SERVLET 类型将创建 <code>org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableApplicationContext <span class="title">createApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; contextClass = <span class="keyword">this</span>.applicationContextClass;</span><br><span class="line">    <span class="keyword">if</span> (contextClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (<span class="keyword">this</span>.webApplicationType) &#123;</span><br><span class="line">            <span class="keyword">case</span> SERVLET:</span><br><span class="line">                contextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> REACTIVE:</span><br><span class="line">                contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"Unable create a default ApplicationContext, "</span></span><br><span class="line">                            + <span class="string">"please specify an ApplicationContextClass"</span>,</span><br><span class="line">                    ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#run%E6%96%B9%E6%B3%95">run方法</a>第16行调用了 <em>prepareContext()</em> 方法,如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(ConfigurableApplicationContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">            ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">            ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class="line">    context.setEnvironment(environment);<span class="comment">//  填充应用环境到上下文</span></span><br><span class="line">    postProcessApplicationContext(context);<span class="comment">//   应用上下文后处理</span></span><br><span class="line">    applyInitializers(context);<span class="comment">//   运行所有实现了ApplicationContextInitializer的bean(在构造函数中从spring.factories中加载过,也可添加自己的,通过addInitializers方法)</span></span><br><span class="line">    listeners.contextPrepared(context);<span class="comment">//   发布contextPrepared事件,对应事件顺序3</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">        logStartupInfo(context.getParent() == <span class="keyword">null</span>);</span><br><span class="line">        logStartupProfileInfo(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add boot specific singleton beans</span></span><br><span class="line">    <span class="comment">//  注册在run方法中创建了的 ApplicationArguments 的单例</span></span><br><span class="line">    context.getBeanFactory().registerSingleton(<span class="string">"springApplicationArguments"</span>,applicationArguments);</span><br><span class="line">    <span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//  注册 Bannner 的单例</span></span><br><span class="line">        context.getBeanFactory().registerSingleton(<span class="string">"springBootBanner"</span>, printedBanner);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load the sources</span></span><br><span class="line">    Set&lt;Object&gt; sources = getAllSources();<span class="comment">// getAllSource方法返回primarySources(比如静态run方法的入参一)以及sources(应用环境Enviroment中的PropertySource)</span></span><br><span class="line">    Assert.notEmpty(sources, <span class="string">"Sources must not be empty"</span>);</span><br><span class="line">    load(context, sources.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]));</span><br><span class="line">    listeners.contextLoaded(context);<span class="comment">// 发布contextLoaded事件,对应事件顺序4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#run%E6%96%B9%E6%B3%95">run方法</a>第17行调用了 <em>refreshContext()</em> 方法,如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshContext</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">    refresh(context);<span class="comment">// 其实调用了应用上下文对象的refresh方法,里面做了很多事情</span></span><br><span class="line">    <span class="comment">//如发布上下文更新事件</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.registerShutdownHook) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            context.registerShutdownHook();<span class="comment">// 注册应用关闭钩子,用于清理资源,调用AbstractApplicationContext#doClose()</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (AccessControlException ex) &#123;</span><br><span class="line">            <span class="comment">// Not allowed in some environments.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#run%E6%96%B9%E6%B3%95">run方法</a>第18行调用了 <em>afterRefresh()</em> 方法,如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  没有默认实现,你可以继承此类并override此方法,比如下下面</span></span><br><span class="line"><span class="comment">//  你可以考虑override更多的方法,来实现自己的逻辑或者控制</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterRefresh</span><span class="params">(ConfigurableApplicationContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">            ApplicationArguments args)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpringApplication</span> <span class="keyword">extends</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(MySpringApplication.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterRefresh</span><span class="params">(ConfigurableApplicationContext context, ApplicationArguments args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.afterRefresh(context, args);</span><br><span class="line">        logger.info(<span class="string">"[Spring application refreshed]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySpringApplication</span><span class="params">(Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(primarySources);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#run%E6%96%B9%E6%B3%95">run方法</a>第24行发布了 <strong>ApplicationStartedEvent</strong> 事件,<code>listeners.started(context);</code>,对应事件顺序5<br><a href="#run%E6%96%B9%E6%B3%95">run方法</a>第25行调用了 <em>callRunners()</em> 方法,如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callRunners</span><span class="params">(ApplicationContext context, ApplicationArguments args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  调用所有的CommandLineRunners和ApplicationRunners</span></span><br><span class="line">    List&lt;Object&gt; runners = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());</span><br><span class="line">    runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());</span><br><span class="line">    AnnotationAwareOrderComparator.sort(runners);</span><br><span class="line">    <span class="keyword">for</span> (Object runner : <span class="keyword">new</span> LinkedHashSet&lt;&gt;(runners)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (runner <span class="keyword">instanceof</span> ApplicationRunner) &#123;</span><br><span class="line">            callRunner((ApplicationRunner) runner, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (runner <span class="keyword">instanceof</span> CommandLineRunner) &#123;</span><br><span class="line">            callRunner((CommandLineRunner) runner, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#run%E6%96%B9%E6%B3%95">run方法</a>第33行发布了 <strong>ApplicationReadyEvent</strong> 事件,<code>listeners.running(context);</code>,对应事件顺序6</p><p>最后没错的话返回上下文对象,应用启动完毕.</p><p>文中提到的ApplicationContextInitializer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextInit</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LogManager.getLogger(ApplicationContextInit.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * spring.factories文件中定义了一系列PropertySource Loaders/Run Listeners/Error Reporters/</span></span><br><span class="line"><span class="comment">     * Application Context Initializers/Application Listeners/Environment Post Processors/</span></span><br><span class="line"><span class="comment">     * Failure Analyzers/FailureAnalysisReporters</span></span><br><span class="line"><span class="comment">     * 1.可以将此类加在spring.factories中的Application Context Initializers后启用(对所有应用生效)</span></span><br><span class="line"><span class="comment">     * 2.calling addInitializers() on SpringApplication before run it(对当前应用生效)</span></span><br><span class="line"><span class="comment">     * 3.通过配置context.initializer.classes(对当前应用生效)</span></span><br><span class="line"><span class="comment">     * 以上配置适用于listeners</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configurableApplicationContext</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext configurableApplicationContext)</span> </span>&#123;</span><br><span class="line">        ConfigurableEnvironment environment = configurableApplicationContext.getEnvironment();</span><br><span class="line">        Map&lt;String, Object&gt; systemEnvironment = environment.getSystemEnvironment();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : systemEnvironment.entrySet()) &#123;</span><br><span class="line">            logger.info(entry.getKey() + <span class="string">":"</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本文链接 <a href="http://blog.elegantme.cn/Spring-Boot%E5%90%AF%E5%8A%A8%E7%B1%BBSpringApplication%E8%A7%A3%E6%9E%90/">http://blog.elegantme.cn/Spring-Boot启动类SpringApplication解析/</a> 转载请标明出处</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://blog.elegantme.cn/Java-Virtual-Machine知识及实践/">Java Virtual Machine知识及实践</a></li><li><a href="http://elegantme.cn/Spring-Boot启动类SpringApplication解析/">Spring-Boot启动类SpringApplication解析</a></li></ul></div>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring-boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo进行简单的SEO优化</title>
      <link href="/Hexo%E8%BF%9B%E8%A1%8C%E7%AE%80%E5%8D%95%E7%9A%84SEO%E4%BC%98%E5%8C%96/"/>
      <url>/Hexo%E8%BF%9B%E8%A1%8C%E7%AE%80%E5%8D%95%E7%9A%84SEO%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>这篇文章将为大家介绍:</p><ol><li>博客的简单SEO<br>SEO需要使用部分插件,关于插件可以查看我的文章<a href="https://elegantme.cn/Mac%E4%B8%8BHexo-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E3%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E3%80%81hexo%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/#%E4%BD%BF%E7%94%A8hexo%E6%8F%92%E4%BB%B6" target="_blank" rel="noopener">Mac下Hexo-Github搭建博客、域名解析、hexo插件安装使用/#使用hexo插件</a></li></ol><h2 id="安装站图生成插件"><a class="markdownIt-Anchor" href="#安装站图生成插件"></a> 安装站图生成插件</h2><p><a href="https://elegantme.cn/Mac%E4%B8%8BHexo-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E3%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E3%80%81hexo%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/#%E4%BD%BF%E7%94%A8hexo%E6%8F%92%E4%BB%B6" target="_blank" rel="noopener">Mac下Hexo-Github搭建博客、域名解析、hexo插件安装使用/#站图生成插件</a></p><h2 id="安装百度自动链接提交插件"><a class="markdownIt-Anchor" href="#安装百度自动链接提交插件"></a> 安装百度自动链接提交插件</h2><p><a href="https://hui-wang.info/2016/10/23/Hexo%E6%8F%92%E4%BB%B6%E4%B9%8B%E7%99%BE%E5%BA%A6%E4%B8%BB%E5%8A%A8%E6%8F%90%E4%BA%A4%E9%93%BE%E6%8E%A5/" target="_blank" rel="noopener">作者原文</a>已经介绍的非常详细了.</p><h2 id="google-search"><a class="markdownIt-Anchor" href="#google-search"></a> google search</h2><p>进入<a href="https://search.google.com/search-console" target="_blank" rel="noopener">谷歌搜索控制台</a>,添加资源并验证<br><img src="/Hexo进行简单的SEO优化/1.png" alt=""><br>验证之后点击左侧站点地图填写地图地址,点击提交即可.<br><img src="/Hexo进行简单的SEO优化/2.png" alt=""><br>百度站图提交大差不差,<a href="https://ziyuan.baidu.com/linksubmit" target="_blank" rel="noopener">百度资源</a></p><h2 id="添加robots文件"><a class="markdownIt-Anchor" href="#添加robots文件"></a> 添加robots文件</h2><blockquote><p>告诉搜索引擎你网站那些页面可以被抓取,那些不可以</p></blockquote><p>在你的项目根目录添加robots.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#hexo robots.txt</span><br><span class="line">User-agent: *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sitemap: https://elegantme.cn/search.xml</span><br><span class="line">Sitemap: https://elegantme.cn/sitemap.xml</span><br><span class="line">Sitemap: https://elegantme.cn/baidusitemap.xml</span><br></pre></td></tr></table></figure><p>你可以去<a href="https://ziyuan.baidu.com/robots/intro" target="_blank" rel="noopener">百度查看robots</a>是否生效<br><img src="/Hexo进行简单的SEO优化/3.png" alt=""></p><h2 id="tdk"><a class="markdownIt-Anchor" href="#tdk"></a> TDK</h2><p>优化你网站的TDK(title、description、keywords),你可以去<a href="http://www.seocha.net/tkd/" target="_blank" rel="noopener">TDK查询</a>查看流量高的博文是如何写的.</p><p>本文链接 <a href="http://blog.elegantme.cn/Hexo%E8%BF%9B%E8%A1%8C%E7%AE%80%E5%8D%95%E7%9A%84SEO%E4%BC%98%E5%8C%96/">http://blog.elegantme.cn/Hexo进行简单的SEO优化/</a> 转载请标明出处</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://blog.elegantme.cn/Mac下Hexo-Github搭建博客、域名解析、hexo插件安装使用/">Mac下Hexo+Github搭建博客、域名解析、hexo插件安装使用</a></li><li><a href="http://blog.elegantme.cn/hello-world/">Hello World</a></li><li><a href="http://blog.elegantme.cn/Mac下Hexo-Github搭建博客、域名解析、hexo插件安装使用/">Mac下Hexo+Github搭建博客、域名解析、hexo插件安装使用</a></li><li><a href="http://elegantme.cn/Hexo进行简单的SEO优化/">Hexo进行简单的SEO优化</a></li></ul></div>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> hexo plugins </tag>
            
            <tag> SEO </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于Disqus评论功能</title>
      <link href="/%E5%85%B3%E4%BA%8EDisqus%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
      <url>/%E5%85%B3%E4%BA%8EDisqus%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>果然因为GFW的原因导致只有设置了代理才可以使用Disqus评论功能😒</p><p>本文链接 <a href="http://blog.elegantme.cn/%E5%85%B3%E4%BA%8EDisqus%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/">http://blog.elegantme.cn/关于Disqus评论功能/</a> 转载请标明出处</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://elegantme.cn/关于Disqus评论功能/">关于Disqus评论功能</a></li></ul></div>]]></content>
      
      
      
        <tags>
            
            <tag> Disqus </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><p>本文链接 <a href="http://blog.elegantme.cn/hello-world/">http://blog.elegantme.cn/hello-world/</a> 转载请标明出处</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://blog.elegantme.cn/Hexo进行简单的SEO优化/">Hexo进行简单的SEO优化</a></li><li><a href="http://blog.elegantme.cn/Mac下Hexo-Github搭建博客、域名解析、hexo插件安装使用/">Mac下Hexo+Github搭建博客、域名解析、hexo插件安装使用</a></li><li><a href="http://elegantme.cn/Hexo进行简单的SEO优化/">Hexo进行简单的SEO优化</a></li></ul></div>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> helloworld </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac下Hexo+Github搭建博客、域名解析、hexo插件安装使用</title>
      <link href="/Mac%E4%B8%8BHexo-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E3%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E3%80%81hexo%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
      <url>/Mac%E4%B8%8BHexo-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E3%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E3%80%81hexo%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>这篇文章将为大家介绍:</p><ol><li>在Mac下Hexo+Github搭建博客</li><li>将域名解析到你的博客</li><li>一些hexo插件的使用</li></ol><p>将结合自己的安装经历、其他参考博文、官方文档带着你完成博客的搭建</p><h2 id="安装node和npm"><a class="markdownIt-Anchor" href="#安装node和npm"></a> 安装node和npm</h2><blockquote><p>如果你已经安装好了node和npm,跳过此节</p></blockquote><h3 id="nvm推荐"><a class="markdownIt-Anchor" href="#nvm推荐"></a> nvm(推荐)</h3><blockquote><p>nvm Node Version Manager node版本管理</p></blockquote><p>使用cURL安装和更新命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></table></figure><p>或者使用Wget：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></table></figure><p>详细事项参考:<a href="https://github.com/creationix/nvm/blob/master/README.md" target="_blank" rel="noopener">README</a><br>安装成功后使用:<code>nvm install stable</code>命令安装最新稳定版node<br>若你安装完毕使用过程中出现:<code>command not found: nvm</code>，请添加以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR="/Users/username/.nvm"</span><br><span class="line">[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; \. "$NVM_DIR/nvm.sh"</span><br></pre></td></tr></table></figure><p>至 <em>~/.bash_profile</em> 或者zsh的 <em>~/.zshrc</em>，请注意 <em>username</em> 是你的用户名</p><h3 id="homebrew"><a class="markdownIt-Anchor" href="#homebrew"></a> Homebrew</h3><p>安装Homebrew参考这里:<a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">Homebrew</a>,之后使用<code>brew install node</code>安装node</p><h3 id="官网安装"><a class="markdownIt-Anchor" href="#官网安装"></a> 官网安装</h3><p>前往<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs.org</a>下载安装器安装</p><h2 id="安装git"><a class="markdownIt-Anchor" href="#安装git"></a> 安装git</h2><blockquote><p>如果你已经安装好了git,跳过此节</p></blockquote><p>在terminal尝试运行 <em>git</em> 命令即可，若没有安装，将会提示进行安装<br>或者使用之前安装好的<a href="#Homebrew">Homebew</a>执行:<code>brew install git</code>安装</p><h2 id="安装hexo"><a class="markdownIt-Anchor" href="#安装hexo"></a> 安装Hexo</h2><p>使用下面的命令检查npm/node/git是否安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm -v </span><br><span class="line">$ node -v</span><br><span class="line">$ git --version</span><br></pre></td></tr></table></figure><p><img src="/Mac下Hexo-Github搭建博客、域名解析、hexo插件安装使用/1.png" alt=""><br>若你已经拥有了<a href="#%E5%AE%89%E8%A3%85node%E5%92%8Cnpm">node</a>和<a href="#%E5%AE%89%E8%A3%85git">git</a>只需运行<code>$ npm install -g hexo-cli</code>即可</p><h3 id="建站"><a class="markdownIt-Anchor" href="#建站"></a> 建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><blockquote><p>**注意:**在你指定的目录下也就是上述&lt;folder&gt;执行hexo命令。<br>**注意:**如果你是在nodejs官网安装的node的话,在使用npm install命令时可能会碰到权限不足的错误,参考<a href="https://docs.npmjs.com/getting-started/fixing-npm-permissions" target="_blank" rel="noopener">权限不足</a>,本人遇到并采用了第二种方法。</p></blockquote><p>之后使用<code>$ hexo d</code>以及<code>$ hexo server</code>既在本地运行了博客,<a href="http://localhost:4000" target="_blank" rel="noopener">点击</a>查看效果</p><h3 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h3><p>Hexo的配置文件在根目录下的<code>._config.yml</code>,下面为一些基本配置.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">xiaohundun</span> <span class="comment">#你网站的标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">blogs</span> <span class="comment">#你网站的子标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">技术、分享、学习</span> <span class="comment">#你网站的描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">java、编程、技术、程序员</span> <span class="comment">#你网站的关键字</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">xiaohundun</span> <span class="comment">#作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh</span> <span class="comment">#语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="comment">#时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://elegantme.cn</span> <span class="comment">#站址</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span> <span class="comment">#文章默认模板</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span> <span class="comment">#开启后新建文章将生成资源文件夹</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br></pre></td></tr></table></figure><h3 id="基本使用"><a class="markdownIt-Anchor" href="#基本使用"></a> 基本使用</h3><h4 id="写作"><a class="markdownIt-Anchor" href="#写作"></a> 写作</h4><p><code>$ hexo new [layout] &lt;title&gt;</code>创建新文章,比如<code>$ hexo new post hello-world</code></p><h4 id="front-matter"><a class="markdownIt-Anchor" href="#front-matter"></a> Front-matter</h4><p>Front-matter 是文件最上方以 — 分隔的区域,用于指定个别文件的变量,比如说本篇文章的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Mac下Hexo+Github搭建博客、域名解析、hexo插件安装使用</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-11</span><span class="bullet">-09</span> <span class="number">21</span><span class="string">:58:44</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo域名解析</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">github.io</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span> <span class="string">plugins</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>其他配置或使用请参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a></p><h3 id="插件及主题的使用"><a class="markdownIt-Anchor" href="#插件及主题的使用"></a> 插件及主题的使用</h3><p><a href="#%E4%BD%BF%E7%94%A8Hexo%E6%8F%92%E4%BB%B6">本文链接</a></p><h2 id="在github创建仓库并开启github-pages"><a class="markdownIt-Anchor" href="#在github创建仓库并开启github-pages"></a> 在Github创建仓库并开启GitHub Pages</h2><p><a href="https://github.com/new" target="_blank" rel="noopener">创建仓库页面</a>填写 <strong>Repository name</strong> 如: <strong><a href="http://xiaohundun.github.io" target="_blank" rel="noopener">xiaohundun.github.io</a></strong><br><img src="/Mac下Hexo-Github搭建博客、域名解析、hexo插件安装使用/2.png" alt=""><br>点击Create repository即可,之后进入自己刚刚创建的仓库,点击上方的Settings进入设置页面:<br><img src="/Mac下Hexo-Github搭建博客、域名解析、hexo插件安装使用/3.png" alt=""><br>往下拉看到<br><img src="/Mac下Hexo-Github搭建博客、域名解析、hexo插件安装使用/5.png" alt=""><br>选择Source为Master Branch之后点击保存即可,之后你可能会看到这样的画面<br><img src="/Mac下Hexo-Github搭建博客、域名解析、hexo插件安装使用/4.png" alt=""><br>GitHub会提示你GitHub Pages是否已经搭建好以及发布到的地址<br>不过上图中是我的域名解析到了GitHub Pages,这在下面会介绍到<br>还没配置解析时,<a href="http://xn--username-im2mp96j6qrpz8b4c6c.github.io" target="_blank" rel="noopener">你的应该是username.github.io</a>,访问以下试试吧</p><h3 id="配置hexo将博客部署到github上"><a class="markdownIt-Anchor" href="#配置hexo将博客部署到github上"></a> 配置Hexo,将博客部署到GitHub上</h3><p>进入Hexo博客根目录打开配置文件<code>._config.yml</code>,找到deploy节点进行如下配置:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:xiaohundun/xiaohundun.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>其中<code>type: git</code>说明是使用git部署,不过要正常使用你需要先安装一个插件,这很简单,只需</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure><p>其中的repo地址是你刚刚创建的仓库地址,如下图获取<br><img src="/Mac下Hexo-Github搭建博客、域名解析、hexo插件安装使用/6.png" alt=""><br>上面的配置中我使用的是SSH,如果你需要使用SSH参考<a href="https://www.jianshu.com/p/a422eb2bb8e2" target="_blank" rel="noopener">这篇文章</a><br>之后你只要使用 <code>hexo g -d</code> 即可完成生成及部署<br>部署完成后访问你的**Github Pages&lt;<a href="http://xiaohundun.github.io" target="_blank" rel="noopener">username.github.io</a>&gt;**查看效果</p><h3 id="将你的域名解析到github-pages"><a class="markdownIt-Anchor" href="#将你的域名解析到github-pages"></a> 将你的域名解析到Github Pages</h3><p>我是在阿里购买的域名,所以下面介绍在阿里云管理控制台添加解析<br>进入<a href="https://dc.console.aliyun.com/next/index#/domain/list/all-domain" target="_blank" rel="noopener">阿里云管理控制台</a>点击你域名后的解析<br><img src="/Mac下Hexo-Github搭建博客、域名解析、hexo插件安装使用/7.png" alt=""><br>点击解析进入解析设置页面,点击添加记录,添加下图第二、三条记录即可(<em>这样添加或不添加www都可访问</em>)<br><img src="/Mac下Hexo-Github搭建博客、域名解析、hexo插件安装使用/8.png" alt=""></p><blockquote><p>第一条记录是解析到百度资源,第二条是解析www域名前缀,第三条的@就是直接解析主域名无前缀</p></blockquote><p>解析记录已经添加完毕,因为我们选择的记录类型是CNAME,所以我们要在本地Hexo博客source根目录下创建CNAME文件(<em>注意:无后缀</em>),并将域名写入文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ touch CNAME</span><br><span class="line">$ vim CNAME</span><br></pre></td></tr></table></figure><p><img src="/Mac下Hexo-Github搭建博客、域名解析、hexo插件安装使用/9.png" alt=""><br>添加你的域名之后保存退出,之后使用 <code>$ hexo g -d</code> 生成并发布,检查Github仓库根目录是否存在CNAME,若存在访问域名测试<br>如果你走到这里都没有问题的话那么恭喜你博客已经搭建成功啦😉<br>为了更好地使用Hexo,你可以接着阅读下面的插件使用😉</p><h2 id="使用hexo插件"><a class="markdownIt-Anchor" href="#使用hexo插件"></a> 使用Hexo插件</h2><p>之后其他插件的使用会更新到此文章</p><h3 id="hexo主题"><a class="markdownIt-Anchor" href="#hexo主题"></a> Hexo主题</h3><p>本人使用的是<a href="https://github.com/probberechts/hexo-theme-cactus" target="_blank" rel="noopener">cactus</a><br>在你的hexo根目录下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/probberechts/hexo-theme-cactus.git themes/cactus</span><br></pre></td></tr></table></figure><p>安装完毕之后在根目录的<code>._config.xml</code>配置文件中指定主题</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">cactus</span></span><br></pre></td></tr></table></figure><h4 id="主题配置"><a class="markdownIt-Anchor" href="#主题配置"></a> 主题配置</h4><p>cactus配置文件放在<code>theme/cactus</code>目录的_config.yml文件,在这里你可以配置导航栏、社交链接、主页文章显示数量、logo、colorscheme、rss、disqus等,如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Configure the navigation menu.</span></span><br><span class="line"><span class="comment"># A pair 'Key: url' will result in a link to 'url' with the name 'Key' in the</span></span><br><span class="line"><span class="comment"># navigation menu. Optionally, you can add translations for the 'Key' in</span></span><br><span class="line"><span class="comment"># languages/*.yml</span></span><br><span class="line"><span class="attr">nav:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about/</span></span><br><span class="line"><span class="attr">  articles:</span> <span class="string">/archives/</span></span><br><span class="line"><span class="attr">  projects:</span> <span class="attr">https://github.com/xiaohundun</span></span><br><span class="line"><span class="attr">  search:</span> <span class="string">/search/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Links to your social media accounts.</span></span><br><span class="line"><span class="comment"># The keys should correspond to Fontawesome icon names</span></span><br><span class="line"><span class="comment"># (see https://fontawesome.com/icons?d=gallery&amp;s=brands);</span></span><br><span class="line"><span class="comment"># only 'mail' is an exception.</span></span><br><span class="line"><span class="attr">social_links:</span></span><br><span class="line"><span class="attr">  github:</span> <span class="attr">https://github.com/xiaohundun</span></span><br><span class="line"><span class="attr">  twitter:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  facebook:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  linkedin:</span> <span class="string">/</span></span><br><span class="line">  <span class="comment"># qq: /</span></span><br><span class="line">  <span class="comment"># weixin: /</span></span><br><span class="line"><span class="attr">  mail:</span> <span class="attr">mailto:xiaohundunjasonchou@gmail.com</span></span><br></pre></td></tr></table></figure><p>另外<a href="https://github.com/probberechts/hexo-theme-cactus" target="_blank" rel="noopener">cactus</a>集成了<a href="https://disqus.com/" target="_blank" rel="noopener">disqus</a>评论功能,注册并创建自己的disqus之后在上述配置文件中开启</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Fill in your Disqus Comments Shortname to enable Disqus comments.</span></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  shortname:</span> <span class="string">xiaohundun</span></span><br></pre></td></tr></table></figure><p>不过因为GFW的影响,设置代理才能用 😂</p><h4 id="开启本地搜索"><a class="markdownIt-Anchor" href="#开启本地搜索"></a> 开启本地搜索</h4><p>首先你需要安装本地搜索插件，运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>创建一个页面用来显示搜索引擎</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page search</span><br></pre></td></tr></table></figure><p><a href="http://xn--search-9m3jaj1s789kp2idt9d.md" target="_blank" rel="noopener">找到刚刚创建的search.md</a>,在<a href="#Front-matter">front-matter</a>中加入<code>type: search</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Search</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">search</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>最后在主题配置文件导航栏中加上链接</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nav:</span></span><br><span class="line"><span class="attr">    search:</span> <span class="string">/Search/</span></span><br></pre></td></tr></table></figure><p>其他请参考<a href="https://github.com/probberechts/hexo-theme-cactus" target="_blank" rel="noopener">cactus</a></p><h3 id="站点计数插件hexo-wordcount"><a class="markdownIt-Anchor" href="#站点计数插件hexo-wordcount"></a> 站点计数插件(<a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>)</h3><p>运行<code>npm install hexo-wordcount --save</code>安装<br>我使用的主题是cactus,使用的模板引擎是ejs,所以使用方式是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">wordcount</span>(<span class="attr">post.content</span>) %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在文章底部显示字数统计以及阅读分钟数,编辑 <strong>post.ejs</strong> 它在<code>theme/cactus/layout/post.ejs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"post"</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/BlogPosting"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">post</span>/<span class="attr">title</span>', &#123; <span class="attr">post:</span> <span class="attr">page</span>, <span class="attr">index:</span> <span class="attr">false</span>, <span class="attr">class_name:</span> '<span class="attr">posttitle</span>' &#125;) %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"meta"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"author"</span> <span class="attr">itemprop</span>=<span class="string">"author"</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/Person"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">page.author</span>) &#123; %&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">page.author</span> %&gt;</span><span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">config.title</span> %&gt;</span><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">post</span>/<span class="attr">date</span>', &#123; <span class="attr">post:</span> <span class="attr">page</span>, <span class="attr">class_name:</span> '<span class="attr">postdate</span>' &#125;) %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">post</span>/<span class="attr">category</span>') %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">post</span>/<span class="attr">tag</span>') %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">post</span>/<span class="attr">gallery</span>') %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span> <span class="attr">itemprop</span>=<span class="string">"articleBody"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">page.content</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>本篇文章<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">wordcount</span>(<span class="attr">page.content</span>) %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>你已阅读<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">min2read</span>(<span class="attr">page.content</span>) %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>分钟<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">comments</span>') %&gt;</span></span><br></pre></td></tr></table></figure><p>注意倒数第三、四行,你可以定义自己的内容及样式,在首页中显示站点文章全部字数同理,修改 <code>theme/cactus/layout/_partial/footer.ejs</code></p><h3 id="跨站文章推荐插件hexo-recommended-posts"><a class="markdownIt-Anchor" href="#跨站文章推荐插件hexo-recommended-posts"></a> 跨站文章推荐插件(<a href="https://github.com/huiwang/hexo-recommended-posts" target="_blank" rel="noopener">hexo-recommended-posts</a>)</h3><p>运行<code>npm install hexo-recommended-posts --save</code>安装<br>每当编辑完新文章使用<code>hexo recommend</code>即可</p><h3 id="本地搜索插件hexo-generator-search"><a class="markdownIt-Anchor" href="#本地搜索插件hexo-generator-search"></a> 本地搜索插件(<a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a>)</h3><p>运行<code>$ npm install hexo-generator-search --save</code>安装<br>cactus主题使用方法<a href="#%E5%BC%80%E5%90%AF%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2">本地搜索</a></p><h3 id="打赏功能"><a class="markdownIt-Anchor" href="#打赏功能"></a> 打赏功能</h3><p>部分Hexo主题可能已经集成了打赏功能,而我这一款没有,所有决定自己添加一个.<br>首先创建一个捐赠使用的模板</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Documents/work/projects/Blog <span class="comment">#这是你的博客根目录</span></span><br><span class="line">touch themes/cactus/layout/_partial/donate.ejs <span class="comment">#在对应主题的layout/_partial中创建模板</span></span><br></pre></td></tr></table></figure><p>模板内容如下(模板内容随你喜欢写):</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加捐赠图标 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> =<span class="string">"post-donate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"donate_board"</span> <span class="attr">class</span>=<span class="string">"donate_bar center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"btn_donate"</span> <span class="attr">class</span>=<span class="string">"btn_donate"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">title</span>=<span class="string">"打赏"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"donate_txt"</span>&gt;</span></span><br><span class="line">           ↑<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">%=theme.donate_message%</span>&gt;</span> <span class="comment">&lt;!--这个值配置在主题的._config.yml中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"donate_guide"</span> <span class="attr">class</span>=<span class="string">"donate_bar center hidden"</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 支付宝打赏图案 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;%- theme.root_url %&gt;/images/Alipay.jpg"</span> <span class="attr">alt</span>=<span class="string">"支付宝打赏"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 微信打赏图案 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;%- theme.root_url %&gt;/images/WeChatpay.jpg"</span> <span class="attr">alt</span>=<span class="string">"微信打赏"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'btn_donate'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#donate_board'</span>).addClass(<span class="string">'hidden'</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#donate_guide'</span>).removeClass(<span class="string">'hidden'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加捐赠图标 --&gt;</span></span><br></pre></td></tr></table></figure><p>模板中需要用到的两个二维码可以在手机上生成之后放在 <em>theme/your_theme_name/source/images</em> 路径不唯一,只要记得在模板中更改即可.<br>接下来创建上面模板要用到的样式文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch themes/cactus/<span class="built_in">source</span>/css/_donate.styl <span class="comment">#路径不唯一,只要后面引用的时候写对地址就好</span></span><br></pre></td></tr></table></figure><p>样式内容如下(样式内容随你喜欢写):</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.donate_bar</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.donate_bar</span> <span class="selector-tag">a</span><span class="selector-class">.btn_donate</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">82px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">82px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(/images/btn-reward.gif)<span class="built_in">no-repeat</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.donate_bar</span> <span class="selector-tag">a</span><span class="selector-class">.btn_donate</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(/images/btn-reward.gif)<span class="built_in">no-repeat</span> <span class="number">0</span> -<span class="number">82px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.donate_bar</span> <span class="selector-class">.donate_txt</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">14px</span>/<span class="number">2</span> <span class="string">"Microsoft Yahei"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.donate_bar</span><span class="selector-class">.hidden</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post-donate</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#donate_guide</span>&#123;</span><br><span class="line">    <span class="comment">/*height: 210px;*/</span></span><br><span class="line">    <span class="comment">/*width: 420px;*/</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#donate_guide</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了一张图片,你可以挑选自己想要的图片或者使用纯CSS,whatever<br>接下来我们需要在主题的主样式文件中引用我们上边的打赏样式,这样才有效果,我的主样式文件位于 <em>themes/cactus/source/css/style.styl</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"_donate"</span> /* 注意引用路径,我的_donate.styl创建在 theme/cactus/source/css中 与 style.styl同级 */</span><br></pre></td></tr></table></figure><p><strong>模板以及样式已经准备完毕,接下来我们在文章模板中使用它</strong><br>我的文章模板位于 <em>theme/catcus/layout/post.ejs</em> 内容如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"post"</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/BlogPosting"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">post</span>/<span class="attr">title</span>', &#123; <span class="attr">post:</span> <span class="attr">page</span>, <span class="attr">index:</span> <span class="attr">false</span>, <span class="attr">class_name:</span> '<span class="attr">posttitle</span>' &#125;) %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"meta"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"author"</span> <span class="attr">itemprop</span>=<span class="string">"author"</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/Person"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">page.author</span>) &#123; %&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">page.author</span> %&gt;</span><span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">config.title</span> %&gt;</span><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">post</span>/<span class="attr">date</span>', &#123; <span class="attr">post:</span> <span class="attr">page</span>, <span class="attr">class_name:</span> '<span class="attr">postdate</span>' &#125;) %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">post</span>/<span class="attr">category</span>') %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">post</span>/<span class="attr">tag</span>') %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">post</span>/<span class="attr">gallery</span>') %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span> <span class="attr">itemprop</span>=<span class="string">"articleBody"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">page.content</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.donate</span>) &#123;%&gt;</span> <span class="comment">&lt;!-- 这里留了一个打赏功能开关--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">donate</span>') %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%&#125;%</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>本篇文章<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">wordcount</span>(<span class="attr">page.content</span>) %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>你已阅读<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">min2read</span>(<span class="attr">page.content</span>) %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>分钟<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">comments</span>') %&gt;</span></span><br></pre></td></tr></table></figure><p>在我的模板中使用了主题配置中的打赏开关以及求赏文本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ENABLE OR DISABLE DONATE FUNCTIONALITY</span><br><span class="line"># SET A DONATE MESSAGE FOR GLOBALLY USE</span><br><span class="line">donate: true</span><br><span class="line">donate_message: 如果觉得不错,就稍稍给个鼓励吧~</span><br></pre></td></tr></table></figure><p>这样下来就是本文打赏功能的效果.</p><h3 id="站图生成插件"><a class="markdownIt-Anchor" href="#站图生成插件"></a> 站图生成插件</h3><p>安装(<a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="noopener">hexo-generator-sitemap</a>)及(<a href="https://github.com/hexojs/hexo-generator-baidu-sitemap" target="_blank" rel="noopener">hexo-generator-baidu-sitemap</a>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-sitemap --save</span><br><span class="line">$ npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>配置(在博客配置文件_config.yml中)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">sitemap.xml</span> <span class="comment">#生成地址</span></span><br><span class="line"><span class="attr">    template:</span> <span class="string">./sitemap_template.xml</span> <span class="comment">#用于生成站图的模板文件</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure><p>如果某篇文章不希望出现在站图中,在<a href="#Front_matter">front_matter</a>中添加 <code>sitemap: false</code></p><h3 id="百度自动链接提交插件hexo-baidu-url-submit"><a class="markdownIt-Anchor" href="#百度自动链接提交插件hexo-baidu-url-submit"></a> 百度自动链接提交插件(<a href="https://github.com/huiwang/hexo-baidu-url-submit" target="_blank" rel="noopener">hexo-baidu-url-submit</a>)</h3><p>详细安装及使用见<a href="https://hui-wang.info/2016/10/23/Hexo%E6%8F%92%E4%BB%B6%E4%B9%8B%E7%99%BE%E5%BA%A6%E4%B8%BB%E5%8A%A8%E6%8F%90%E4%BA%A4%E9%93%BE%E6%8E%A5/" target="_blank" rel="noopener">作者原文</a></p><p>本文链接 <a href="http://blog.elegantme.cn/Mac%E4%B8%8BHexo-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E3%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E3%80%81hexo%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/">http://blog.elegantme.cn/Mac下Hexo-Github搭建博客、域名解析、hexo插件安装使用/</a> 转载请标明出处</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://blog.elegantme.cn/Hexo进行简单的SEO优化/">Hexo进行简单的SEO优化</a></li><li><a href="http://blog.elegantme.cn/hello-world/">Hello World</a></li><li><a href="http://blog.elegantme.cn/Hexo进行简单的SEO优化/">Hexo进行简单的SEO优化</a></li><li><a href="http://elegantme.cn/Hexo进行简单的SEO优化/">Hexo进行简单的SEO优化</a></li></ul></div>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> hexo plugins </tag>
            
            <tag> hexo域名解析 </tag>
            
            <tag> github.io </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
